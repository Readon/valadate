using GLib;

[CCode (cprefix = "GI", lower_case_cprefix = "g_i", cheader_filename = "gobject-introspection-1.0/girepository.h")]
namespace Introspection {

	[CCode (cprefix = "G_IREPOSITORY_ERROR_")]
	errordomain RepositoryError {
		TYPELIB_NOT_FOUND,
		NAMESPACE_MISMATCH,
		NAMESPACE_VERSION_CONFLICT,
		LIBRARY_NOT_FOUND
	}
	
	[CCode (cname="int", cprefix = "G_IREPOSITORY_LOAD_FLAG_")]
	public enum RepositoryLoadFlags {
		LAZY
	}

	[CCode (ref_function = "", unref_function = "")]
	public class Repository {
		public static unowned Repository get_default ();
		public static void prepend_search_path (string directory);
		public static SList<string> get_search_path ();
		
		public string load_typelib (Typelib typelib, RepositoryLoadFlags flags) throws RepositoryError;
		public bool is_registered (string namespace_, string version);
		public BaseInfo? find_by_name (string namespace, string name);
		public Typelib require (string namespace, string? version = null, RepositoryLoadFlags flags = 0) throws RepositoryError;
		public string[] get_dependencies (string namespace);
		public string[] get_loaded_namespaces ();
		public BaseInfo? find_by_type (Type type);
		public int get_n_infos (string namespace);
		public BaseInfo get_info (string namespace, int index);
		public string get_typelib_path (string namespace);
		public string get_shared_library (string namespace);
		public string get_version (string namespace);
		
		public OptionGroup get_option_group ();
		public bool dump (string arg) throws RepositoryError;
	}
	
	[CCode (cprefix = "g_typelib_", free_function = "g_typelib_free")]
	public struct Typelib {
		public static Typelib new_from_memory (uchar[] memory);
		public static Typelib new_from_const_memory (uchar[] memory);
		public static Typelib new_from_mapped_file (MappedFile mfile);
		
		public bool symbol (string name, ref void* symbol);
		public string get_namespace ();
	}
	
	[CCode (cprefix = "GI_INFO_TYPE_")]
	public enum InfoType {
		INVALID,
		FUNCTION,
		CALLBACK,
		STRUCT,
		BOXED,
		ENUM,
		FLAGS,
		OBJECT,
		INTERFACE,
		CONSTANT,
		ERROR_DOMAIN,
		UNION,
		VALUE,
		SIGNAL,
		VFUNC,
		PROPERTY,
		FIELD,
		ARG,
		TYPE,
		UNRESOLVED
	}
	
	[CCode (cprefix = "g_base_info_", ref_function = "g_base_info_ref", unref_function = "g_base_info_unref")]
	public struct BaseInfo {
		[CCode (cname = "g_info_new")]
		public static BaseInfo @new (InfoType type, BaseInfo container, Typelib typelib, uint offset);
		
		public InfoType get_type ();
		public string get_name ();
		public string get_namespace ();
		public bool is_deprecated ();
		public string get_annotation (string name);
		public BaseInfo get_container ();
		public Typelib get_typelib ();
	}
	
	[CCode (cprefix = "GI_FUNCTION_")]
	public enum FunctionInfoFlags {
		IS_METHOD,
		IS_CONSTRUCTOR,
		IS_GETTER,
		IS_SETTER,
		WRAPS_VFUNC,
		THROWS
	}
	
	[CCode (cprefix = "G_INVOKE_ERROR_")]
	errordomain InvokeError {
		FAILED,
		SYMBOL_NOT_FOUND,
		ARGUMENT_MISMATCH
	}
	
	[CCode (cprefix = "g_function_info_")]
	public struct FunctionInfo : BaseInfo {
		public string get_symbol ();
		public FunctionInfoFlags get_flags ();
		public PropertyInfo get_property ();
		public VFuncInfo get_vfunc ();
		
		public bool invoke(ref Argument[] in_args, ref Argument[] out_args, ref Argument return_value) throws InvokeError;
	}
	
	[CCode (cname="GArgument", cprefix = "v_")]
	public struct Argument {
		bool @boolean;
		int8 @int8;
		uint8 @uint8;
		int16 @int16;
		uint16 @uint16;
		int32 @int32;
		uint32 @uint32;
		int64 @int64;
		uint64 @uint64;
		float @float;
		double @double;
		int @int;
		uint @uint;
		long @long;
		ulong @ulong;
		int @ssize;
		int @size;
		string @string;
		void* @pointer;
	}

	[CCode (cprefix = "GI_TRANSFER_")]
	public enum Transfer {
		NOTHING,
		CONTAINER,
		EVERYTHING
	}
	
	[CCode (cprefix = "g_callable_info_")]
	public struct CallableInfo : BaseInfo {
		public TypeInfo get_return_type ();
		public Transfer get_caller_owns ();
		public bool may_return_null ();
		public int get_n_args ();
		public ArgumentInfo get_arg (int index);
	}
	
	[CCode (cprefix = "GI_DIRECTION_")]
	public enum Direction {
		IN,
		OUT,
		INOUT
	}
	
	[CCode (cprefix = "GI_SCOPE_TYPE_")]
	public enum ScopeType {
		INVALID,
		CALL,
		OBJECT,
		ASYNC,
		NOTIFIED
	}
	
	[CCode (cname="GIArgInfo", cprefix = "g_arg_info_")]
	public struct ArgumentInfo : BaseInfo {
		public Direction get_direction ();
		public bool is_dipper ();
		public bool is_return_value ();
		public bool is_optional ();
		public bool may_be_null ();
		public Transfer get_ownership_transfer ();
		public ScopeType get_scope ();
		public int get_closure ();
		public int get_destroy ();
		public TypeInfo get_type ();
	}
	
	[CCode (cprefix = "GI_TYPE_TAG_")]
	public enum TypeTag {
		VOID,
		BOOLEAN,
		INT8,
		UINT8,
		INT16,
		UINT16,
		INT32,
		UINT32,
		INT64,
		UINT64,
		INT,
		UINT,
		LONG,
		ULONG,
		SSIZE,
		SIZE,
		FLOAT,
		DOUBLE,
		TIME_T,
		GTYPE,
		UTF8,
		FILENAME,
		ARRAY,
		INTERFACE,
		GLIST,
		GSLIST,
		GHASH,
		ERROR
	}
	
	[CCode (cprefix = "g_type_info_")]
	public struct TypeInfo : BaseInfo {
		public bool is_pointer ();
		public TypeTag get_tag ();
		public TypeInfo get_param_type (int index);
		public BaseInfo get_interface ();
		public int get_array_length ();
		public int get_array_fixed_sized ();
		public bool is_zero_terminated ();
		public int get_n_error_domains ();
		public ErrorDomainInfo get_error_domain (int index);
		public TypeInfo get_type ();
	}
	
	[CCode (cprefix = "g_error_domain_info_")]
	public struct ErrorDomainInfo : BaseInfo {
		public string get_quark ();
		public InterfaceInfo get_codes ();
	}
	
	[CCode (cprefix = "g_value_info_")]
	public struct ValueInfo : BaseInfo {
		public long get_value ();
	}
	
	[CCode (cprefix = "GI_FIELD_")]
	public enum FieldInfoFlags {
		IS_READABLE,
		IS_WRITABLE
	}
	
	[CCode (cprefix = "g_field_info_")]
	public struct FieldInfo : BaseInfo {
		public FieldInfoFlags get_flags ();
		public int get_size ();
		public int get_offset ();
		public TypeInfo get_type ();
		
		public bool get_field (void* mem, ref Argument value);
		public bool set_field (void* mem, ref Argument value);
	}
	
	[CCode (cprefix = "g_union_info_")]
	public struct UnionInfo : BaseInfo {
		public int get_n_fields ();
		public FieldInfo get_field (int index);
		public int get_n_methods ();
		public FunctionInfo get_method (int index);
		public bool is_discriminated ();
		public int get_discriminator_offset ();
		public TypeInfo get_discriminator_type ();
		public ConstantInfo get_discriminator (int index);
		public FunctionInfo find_method (string name);
		public int get_size ();
		public int get_alignement ();
	}
	
	[CCode (cprefix = "g_struct_info_")]
	public struct StructInfo : BaseInfo {
		public int get_n_fields ();
		public FieldInfo get_field (int index);
		public int get_n_methods ();
		public FunctionInfo get_method (int index);
		public FunctionInfo find_method (string name);
		public int get_size ();
		public int get_alignement ();
		public bool is_class_struct ();
	}
	
	[CCode (cprefix = "g_registered_type_info_")]
	public struct RegisteredTypeInfo : TypeInfo {
		public unowned string get_type_name ();
		public unowned string get_type_init ();
		[CCode (cname="g_registered_type_info_get_g_type")]
		public Type get_type ();
	}
	
	[CCode (cprefix = "g_enum_info_")]
	public struct EnumInfo : BaseInfo {
		public int get_n_values ();
		public ValueInfo get_value (int index);
		public TypeTag get_storage_type ();
	}
	
	[CCode (cprefix = "g_object_info_")]
	public struct ObjectInfo : BaseInfo {
		public string get_type_name ();
		public string get_type_init ();
		public bool get_abstract ();
		public ObjectInfo get_parent ();
		public int get_n_interfaces ();
		public InterfaceInfo get_interface (int index);
		public int get_n_fields ();
		public FieldInfo get_field (int index);
		public int get_n_properties ();
		public PropertyInfo get_property (int index);
		public int get_n_methods ();
		public FunctionInfo get_method (int index);
		public FunctionInfo find_method (string name);
		public int get_n_signals ();
		public SignalInfo get_signal (int index);
		public int get_n_vfuncs ();
		public VFuncInfo get_vfunc (int index);
		public int get_n_constants ();
		public ConstantInfo get_constant (int index);
		public StructInfo get_class_struct ();
	}
	
	[CCode (cprefix = "g_interface_info_")]
	public struct InterfaceInfo : BaseInfo {
		public int get_n_prerequisites ();
		public BaseInfo get_prerequisite (int index);
		public int get_n_properties ();
		public PropertyInfo get_property (int index);
		public int get_n_methods ();
		public FunctionInfo get_method (int index);
		public FunctionInfo find_method(string name);
		public int get_n_signals ();
		public SignalInfo get_signal (int index);
		public int get_n_vfuncs ();
		public VFuncInfo get_vfunc (int index);
		public int get_n_constants ();
		public ConstantInfo get_constant (int index);
	}
	
	[CCode (cprefix = "g_property_info_")]
	public struct PropertyInfo : BaseInfo {
		public ParamFlags get_flags ();
		public TypeInfo get_type ();
	}
	
	[CCode (cprefix = "g_signal_info_")]
	public struct SignalInfo : BaseInfo {
		public SignalFlags get_flags ();
		public VFuncInfo get_class_closure (int index);
		public bool true_stops_emit ();
	}
	
	[CCode (cprefix = "GI_VFUNC_")]
	public enum VFuncInfoFlags {
		MUST_CHAIN_UP,
		MUST_OVERRIDE,
		MUST_NOT_OVERRIDE
	}
	
	[CCode (cprefix = "g_vfunc_info_")]
	public struct VFuncInfo : BaseInfo {
		public VFuncInfoFlags get_flags ();
		public int get_offset ();
		public SignalInfo get_signal ();
	}
	
	[CCode (cprefix = "g_constant_info_")]
	public struct ConstantInfo : BaseInfo {
		public TypeInfo get_type ();
		public int get_value ();
	}
}