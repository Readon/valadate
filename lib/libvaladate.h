/* libvaladate.h generated by valac 0.30.0, the Vala compiler, do not modify */


#ifndef __LIBVALADATE_H__
#define __LIBVALADATE_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>

G_BEGIN_DECLS


#define VALADATE_TYPE_FIXTURE (valadate_fixture_get_type ())
#define VALADATE_FIXTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VALADATE_TYPE_FIXTURE, ValadateFixture))
#define VALADATE_IS_FIXTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VALADATE_TYPE_FIXTURE))
#define VALADATE_FIXTURE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), VALADATE_TYPE_FIXTURE, ValadateFixtureIface))

typedef struct _ValadateFixture ValadateFixture;
typedef struct _ValadateFixtureIface ValadateFixtureIface;

#define VALADATE_TYPE_TEMP_DIR (valadate_temp_dir_get_type ())
#define VALADATE_TEMP_DIR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VALADATE_TYPE_TEMP_DIR, ValadateTempDir))
#define VALADATE_TEMP_DIR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VALADATE_TYPE_TEMP_DIR, ValadateTempDirClass))
#define VALADATE_IS_TEMP_DIR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VALADATE_TYPE_TEMP_DIR))
#define VALADATE_IS_TEMP_DIR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VALADATE_TYPE_TEMP_DIR))
#define VALADATE_TEMP_DIR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VALADATE_TYPE_TEMP_DIR, ValadateTempDirClass))

typedef struct _ValadateTempDir ValadateTempDir;
typedef struct _ValadateTempDirClass ValadateTempDirClass;
typedef struct _ValadateTempDirPrivate ValadateTempDirPrivate;

struct _ValadateFixtureIface {
	GTypeInterface parent_iface;
	void (*set_up) (ValadateFixture* self);
	void (*tear_down) (ValadateFixture* self);
};

struct _ValadateTempDir {
	GObject parent_instance;
	ValadateTempDirPrivate * priv;
};

struct _ValadateTempDirClass {
	GObjectClass parent_class;
};

typedef gboolean (*ValadatePredicate) (void* user_data);
typedef void (*ValadateBlock) (void* user_data);
typedef void (*ValadateAsyncBegin) (GAsyncReadyCallback callback, void* callback_target, void* user_data);
typedef void (*ValadateCancelableAsyncBegin) (GCancellable* cancel, GAsyncReadyCallback callback, void* callback_target, void* user_data);
typedef void (*ValadateAsyncFinish) (GAsyncResult* _result_, void* user_data);

GType valadate_fixture_get_type (void) G_GNUC_CONST;
void valadate_fixture_set_up (ValadateFixture* self);
void valadate_fixture_tear_down (ValadateFixture* self);
gint valadate_fixture_get_timeout (ValadateFixture* self);
void valadate_fixture_set_timeout (ValadateFixture* self, gint timeout);
GType valadate_temp_dir_get_type (void) G_GNUC_CONST;
gchar* valadate_temp_dir_get_orig_dir_name (ValadateTempDirClass* klass);
gchar* valadate_temp_dir_get_tmp_dir_name (ValadateTempDirClass* klass);
GFile* valadate_temp_dir_file (ValadateTempDir* self, const gchar* path);
gchar* valadate_temp_dir_contents (ValadateTempDir* self, const gchar* path);
ValadateTempDir* valadate_temp_dir_store (ValadateTempDir* self, const gchar* path, const gchar* content);
ValadateTempDir* valadate_temp_dir_copy (ValadateTempDir* self, const gchar* path, const gchar* src_path);
ValadateTempDir* valadate_temp_dir_shell (ValadateTempDir* self, const gchar* path, const gchar* code);
void valadate_temp_dir_delete_recursive (GFile* file, GError** error);
ValadateTempDir* valadate_temp_dir_new (void);
ValadateTempDir* valadate_temp_dir_construct (GType object_type);
GFile* valadate_temp_dir_get_dir (ValadateTempDir* self);
GFile* valadate_temp_dir_get_src_dir (ValadateTempDir* self);
gboolean valadate_wait_for_condition (gint timeout, GObject* emitter, const gchar* signame, ValadatePredicate predicate, void* predicate_target, GDestroyNotify predicate_target_destroy_notify, ValadateBlock block, void* block_target);
gboolean valadate_wait_for_signal (gint timeout, GObject* emitter, const gchar* signame, ValadateBlock block, void* block_target);
gboolean valadate_wait_for_async (gint timeout, ValadateAsyncBegin async_function, void* async_function_target, ValadateAsyncFinish async_finish, void* async_finish_target);
gboolean valadate_wait_for_cancellable_async (gint timeout, ValadateCancelableAsyncBegin async_function, void* async_function_target, ValadateAsyncFinish async_finish, void* async_finish_target);


G_END_DECLS

#endif
